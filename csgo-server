#! /bin/bash

basename="$(basename "${BASH_SOURCE[0]}")"
dirname="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
THIS_SCRIPT="$dirname/$basename"
if [[ $PATH =~ (^|:)$dirname(:|$) ]]; then THIS_COMM=$basename; else THIS_COMM="$0"; fi

info () { cat <<EOF
================================================================================

                           CS:GO Multi Server Manager
                           --------------------------

   Launch and set up your Counter-Strike: Global Offensive Dedicated Servers.
   Report bugs, get more information and receive updates to this script at:

                https://github.com/dasisdormax/csgo-multiserver

--------------------------------------------------------------------------------

        Copyright (C) 2016 Maximilian Wende <maximilian.wende@gmail.com>

Licensed under the Apache License, Version 2.0 (the "License");  you may not use
this  file except in compliance  with the License. You may obtain a  copy of the
License at:
                   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,  software distributed
under  the License  is distributed on  an "AS IS"  BASIS,  WITHOUT WARRANTIES OR
CONDITIONS  OF ANY KIND,  either  express or  implied.  See the  License for the
specific language governing permissions and limitations under the License.

================================================================================

EOF
}

################################## CONFIGURATION #################################

# Select user switch command (su or sudo)
# Note: `sudo -u USER command' would be greater, but takes more work
SU="sudo su -"
# SU="su -"

# APPID, APPNAME: Steam App ID an name of the game to be managed
APPID=740
APPNAME="csgo"

# SERVER_EXEC: The executable file of the server, within INSTANCE_DIR
SERVER_EXEC="srcds_run"

# MSM_CFG: General Configuration file location
# if a relative path is given, it is interpreted as relative to the user's home directory
MSM_CFG="$APPNAME-msm.conf"



################################ HELPER FUNCTIONS ################################
usage () {
	cat <<-EOF
		Usage: $THIS_COMM < commands >

		GENERAL COMMANDS:
		    usage    > Display this help message
		    info     > About this script / copyright and license information

		INSTANCE SELECTION:
		    @...     > Select the server instance to apply the following commands on.
		             > If no name is given, work on the base installation instead.
		    The default instance \$DEFAULT_INSTANCE can be specified in the config file

		INSTANCE-SPECIFIC COMMANDS:
		    create   > Create a new server instance
		    start | stop | restart
		             > Start/Stop/Restart given server instance (using)
		    status   > Check whether the server is currently running
		    console  > Attach (connect) to the server's console. While inside, press
		             > CTRL-D to detach (return to outside) without killing the server

		ADMINISTRATION COMMANDS (regarding the base installation):
		    admin-install
		             > Configure this user as his own admin, install SteamCMD,
		             > and optionally download the game
		    update   > Install/Update the game server
		    validate > Repair broken/missing game files

		Commands will be executed in the order they are given. If a command fails,
		subsequent commands will not be executed.

	EOF
}

# A yes/no prompt. With the first parameter $1, an alternative prompt message can be given
# By default, a no will exit the program with an exit code of 1. By putting anything as $2,
# the function will instead return with a value of 1.
prompt () {
	PROMPT="Proceed?"
	if [[ $1 ]]; then PROMPT="$1"; fi

	read -r -p "$PROMPT (Y/n) " INPUT

	if [[ $INPUT && ! $INPUT =~ ^([Yy]|[Yy][Ee][Ss])$ ]]; then
		if [[ $2 ]]; then return 1; else exit 1; fi
	fi
}

# kills and deletes the tmux-session at location $SOCKET
delete-tmux () {
	tmux -S "$SOCKET" kill-server
	rm $SOCKET
	return 0
}

# Sets the instance to the value of $1
set-instance () {
	INSTANCE="$1"
	if [[ $INSTANCE ]];
	then
		INSTANCE_DIR="$HOME/$APPNAME@$INSTANCE"
		SERVER_TEXT="Server Instance @$INSTANCE"
	else
		INSTANCE_DIR="$INSTALL_DIR"
		SERVER_TEXT="Base Installation"
	fi
	SESSION_NAME="$USER@$INSTANCE"
	SOCKET="$INSTALL_DIR/.msm/clients/$SESSION_NAME"
	# Prints usage if no more commands are given
	printusage=1
}

########################## GENERAL SCRIPT CONFIGURATION ##########################

# Get absolute config file location, based on MSM_CFG
# $1 is the base directory, if omitted, the current home directory is taken
cfgfile () {
	if [[ $MSM_CFG =~ ^/ ]]; then
		local CFG="$MSM_CFG"
	else
		if [[ $1 ]]; then
			echo "$1/$MSM_CFG"
		else
			echo "$HOME/$MSM_CFG"
		fi
	fi
}

CFG=`cfgfile`

# Check environment variables for correctness
# If an argument $1 is given, these variables are checked for that user instead of the current one
checkvars () {
	if [[ $1 ]]; then local USER="$1"; fi
	if [[ ! $ADMIN ]]; then
		echo "ERROR: ADMIN is not defined"
		return 1
	fi
	if [[ $USER == $ADMIN && ( ! $STEAMCMD_DIR || ! -x $STEAMCMD_DIR/steamcmd.sh ) ]]; then
		echo "ERROR: STEAMCMD_DIR is not defined or steamcmd.sh was not found in it"
		return 1
	fi
	if [[ ! $INSTALL_DIR ]]; then
		echo "ERROR: INSTALL_DIR is not defined"
		return 1
	fi
	if [[ ! -r $INSTALL_DIR ]]; then
		echo "ERROR: < $INSTALL_DIR > does not exist or is not readable"
		return 1
	fi
	if [[ $(cat "$INSTALL_DIR/.msm/appid" 2> /dev/null) != $APPID ]]; then
		echo "ERROR: The appid of the installation at < $INSTALL_DIR > does not match"
		return 1
	fi
	return 0
}

# reads the user's configuration file or the file given with $1
readcfg () {
	if [[ $1 ]]; then local CFG="$1"; fi
	if [[ -r $CFG ]]; then
		source "$CFG" # this isn't great, as a config file of a different user can potentially be malicious
		checkvars || {
			echo "ERROR: One or more errors in the configuration file < $CFG >"
			return 1
		}
		return 0
	fi
	return 1
}

# prints the variable values for the config file
printcfg () {
	cat <<-EOF
		#! /bin/bash
		# This is a configuration file for CS:GO Multi Server Manager
		ADMIN="$ADMIN"
		INSTALL_DIR="$INSTALL_DIR"
		DEFAULT_INSTANCE="$DEFAULT_INSTANCE"
		EOF
	# Vars that are only interesting for the admin
	if [[ $USER == $ADMIN ]]; then cat <<-EOF
		STEAMCMD_DIR="$STEAMCMD_DIR"
		EOF
	fi
}

# Write configuration file for the current user
writecfg () {
	checkvars || exit 1
	CFG=`cfgfile`
	echo "Creating CS:GO MSM Config File in < $CFG >"
	rm $CFG &> /dev/null

	printcfg > $CFG
	echo
}



############################ SERVER CONTROL FUNCTIONS ############################
start () {
	echo "Starting $SERVER_TEXT ..."
	# Nothing to do if server is already running
	if status; then
		echo "INFO:  $SERVER_TEXT is already running!"
		echo "       Enter the console using \`$THIS_COMM @$INSTANCE console'"
		echo
		return 0 # already running
	fi

	if [[ ! -d $INSTANCE_DIR ]]; then
		echo "ERROR: Instance directory < $INSTANCE_DIR > does not exist!"
		echo "       Create an instance using \`$THIS_COMM @$INSTANCE create-instance'"
		echo
		return 1 # failure
	fi

	if [[ ! -w $INSTANCE_DIR ]]; then
		echo "ERROR: You do not have full access to < $INSTANCE_DIR > !"
		echo "       Only < $ADMIN > can modify and launch the base installation! Try creating"
		echo "       an own instance using \`$THIS_COMM @name create-instance' instead."
		echo
		return 1 # failure
	fi

	if [[ ! -x $INSTANCE_DIR/$SERVER_EXEC ]]; then
		echo "ERROR: Server Executable not found at < $INSTANCE_DIR/$SERVER_EXEC > !"
		echo "       Try repairing the installation using \`$THIS_COMM update',"
		echo "       \`$THIS_COMM repair' or rebuild this instance."
		echo
		return 1 # failure
	fi

	# TODO: actual start procedure here

	echo
	echo "$SERVER_TEXT started successfully!"
	echo "To enter the game's console, type \`$THIS_COMM @$INSTANCE console'."
	echo
	return 0 # success
}

stop () {
	echo "Stopping $SERVER_TEXT ..."
	status || { echo; return 0; }

	# TODO: actual stop procedure here

	echo
}

# Status (Up/Down and extra info) of the server in tmux session $SESSION_NAME
status () {
	# Check if tmux socket exists and is accessible
	if [[ ! -e "$SOCKET" ]]; then
		return 1 # false - not running
	fi
	if [[ ! -w "$SOCKET" ]]; then
		echo "ERROR: Cannot access socket of session < $SESSION_NAME> !"
		echo
		return 23
	fi

	if ( tmux -S "$SOCKET" has-session >/dev/null ); then
		# No session runs within tmux
		delete-tmux
		return 1 # false - not running
	fi

	# Get server pid and owner
	eval "local $(tmux -S "$SOCKET" showenv SERVER_PID)"
	local SOCKET_OWNER="$(ls -ld "$SOCKET" | awk 'NR==1 {print $3}')"
	if [[ ! $SERVER_PID ]]; then delete-tmux; fi

	# Check, if pid actually is the server and belongs to the user
	local PS_OUT="$(ps -o uname=,comm= -p "$SERVER_PID"  2>/dev/null)"
	if [[ $PS_OUT != "$SOCKET_OWNER $SERVER_EXEC" ]]; then
		delete-tmux
		return 1 # false - not running
	fi
	# Game Server found
	return 0
}

# Switch to the game console in tmux session
console () {
	if ! status; then
		echo "ERROR: $SERVER_TEXT is not running"
		echo
		return 1
	fi
}



########################### ADMIN MANAGEMENT FUNCTIONS ###########################
update () {
	local ACTION="update"
	if [[ $1 == "validate" ]]; then local ACTION="validate"; fi
	if [[ $USER != $ADMIN ]]; then
		echo "Only the admin < $ADMIN > can manage and $ACTION the game installation."
		echo "Please log in to the account of < $ADMIN > now! (or CTRL-D to cancel)"
		$SU "$ADMIN" -c "'$THIS_SCRIPT' $ACTION"
		if (( $? )); then
			echo "ERROR: Installation/update as < $ADMIN > failed!"
			echo
			return 1
		fi
		return 0
	fi

	touch "$INSTALL_DIR/.msm/updating"

	local LOGFILE="$STEAMCMD_DIR/$ACTION.log"
	echo > "$LOGFILE"
	echo "Log File: < $LOGFILE >"
	echo

	tries=5
	try=0
	until [[ $SUCCESS ]] || (( ++try > tries )); do
		tee -a "$LOGFILE" <<-EOF
			###################################################
			# $(printf "[%2d/%2d] %40s" $try $tries "$(date)") #
			# $(printf "%-47s" "Trying to $ACTION the game using SteamCMD ...") #
			###################################################

		EOF
		$(which unbuffer) "$STEAMCMD_DIR/steamcmd.sh" +runscript "$STEAMCMD_DIR/$ACTION" | tee -a "$LOGFILE"
		echo >> "$LOGFILE" # an extra newline in the file because of the weird escape sequences that steam uses
		echo | tee -a "$LOGFILE"

		if ( egrep "Success! App '$APPID'.*(fully installed|up to date)" "$LOGFILE" > /dev/null ); then
			local SUCCESS=1
		fi
	done

	# Update timestamp on appid file, so clients know that files may have changed
	rm "$INSTALL_DIR/.msm/updating"
	touch "$INSTALL_DIR/.msm/appid"

	unset try tries
	if [[ $SUCCESS ]]; then
		echo "Update completed successfully!"
		echo
		return 0
	else
		echo "Update failed. For more information, see the log file at"
		echo "               < $LOGFILE >"
		echo
		return 1
	fi
}

delete-all-tmuxes () {
	local BASEPATH="$INSTALL_DIR/.msm/clients"
	# Nothing to do, if the path does not exist
	if [[ ! -w $BASEPATH ]]; then return 0; fi

	for sock in $(ls "$BASEPATH"); do
		local SOCKET="$BASEPATH/$sock"
		if [[ -w $SOCKET ]]; then
			delete-tmux
		fi
	done
	unset sock
}



###################### SERVER INSTANCE MANAGEMENT FUNCTIONS ######################
create-instance () {
	echo "-------------------------------------------------------------------------------"
	echo "               CS:GO Multi-Mode Server Manager - Instance Setup"
	echo "-------------------------------------------------------------------------------"
	echo

	if [[ $INSTANCE_DIR == $INSTALL_DIR ]]; then
		echo "INFO:  You have selected the base installation."
		echo "       There is no need to create an instance here."
		echo
		# This is already a working instance
		return 0
	fi

	[[ -e $INSTANCE_DIR ]] && {
		if ! [[ -d $INSTANCE_DIR ]]; then
			echo "ERROR: < $INSTANCE_DIR > is not a directory! Move the file and try again."
			echo
			return 1
		fi
		
		if ! [[ -r $INSTANCE_DIR && -w $INSTANCE_DIR && -x $INSTANCE_DIR ]]; then
			echo "ERROR: You do not have the necessary privileges to create a server instance"
			echo "       in < $INSTANCE_DIR > !"
			echo
			return 1
		fi
		
		if [[ -r $INSTANCE_DIR && ! -d $INSTANCE_DIR/.msm ]]; then
			echo "ERROR: The directory < $INSTANCE_DIR > already exists with"
			echo "       other than game server data. Please backup all files in that"
			echo "       directory and try again"
			echo
			return 1
		fi
	}


}



##################################### SETUP #####################################
setup () {
	# First-time setup
	echo "-------------------------------------------------------------------------------"
	echo "                CS:GO Multi-Mode Server Manager - Initial Setup"
	echo "-------------------------------------------------------------------------------"
	echo
	echo "It seems like this is the first time you use this script on this machine."
	echo "Before advancing, be aware of a few things:"
	echo
	echo ">>  A configuration file will be created in the location:"
	echo "               < $CFG >"
	echo
	echo "    If you want to use a different location, exit and edit"
	echo "    the \$MSM_CFG variable within this file accordingly."
	echo
	echo ">>  For multi-user setups, this script must be readable for all users"
	echo "               < $THIS_SCRIPT >"
	echo
	prompt
	# Query steam installation admin user
	echo
	echo "Please choose the user that is responsible for the game installation and"
	echo "updates on this machine. As long as the access rights are correctly set,"
	echo "this server will use the game data provided by that user, which makes"
	echo "re-downloading the game for multiple users unnecessary."
	echo
	while [[ ! $ADMIN_HOME ]]; do
		read -p "Admin's username (default: $USER) " -r ADMIN
		if [[ ! $ADMIN ]]; then ADMIN="$USER"; fi
		if [[ ! $(getent passwd $ADMIN) ]]; then
			echo
			echo "User < $ADMIN > does not exist. Please try again!"
			echo
		fi
		ADMIN_HOME=$(eval echo "~$ADMIN")
		if [[ ! -r $ADMIN_HOME ]]; then
			echo
			echo "That user's home directory < $ADMIN_HOME > is not readable. Please specify a different admin."
			echo
			ADMIN_HOME=
		fi
	done

	echo
	# Check if the admin has a working configuration already
	if [[ $USER != $ADMIN ]]; then
		# If client installation fails (e.g. the admin has no configuration himself,
		# try admin installation
		if ! client-install; then
			echo "Additional installation steps have to be taken on the admin account < $ADMIN >"
			echo "Please log in to the account of < $ADMIN > now!"
			$SU $ADMIN -c "\"$THIS_SCRIPT\" admin-install"
			if (( $? )); then
				echo "ERROR: Admin Installation for < $ADMIN > failed!"
				echo
				exit 1
			fi
			# Try client installation again!
			if ! client-install; then
				echo "ERROR: Client Installation failed!"
				echo
				exit 1
			fi
		fi
	else
		admin-install
	fi
}

client-install () {
	echo "Trying to import settings from < $ADMIN > ..."
	ADMIN_HOME=$(eval echo "~$ADMIN")
	if [[ ! -r $ADMIN_HOME ]]; then
		echo "ERROR: The admin's home directory < $ADMIN_HOME > is not readable."
		echo
		return 1
	fi
	ADMIN_CFG="$(cfgfile $ADMIN_HOME)"
	readcfg "$ADMIN_CFG"
	if (( $? )); then echo; return 1; fi
	echo
	writecfg
	return 0
}

admin-install () {
	echo "-------------------------------------------------------------------------------"
	echo "                  CS:GO Multi Server Manager - Admin Install"
	echo "-------------------------------------------------------------------------------"
	echo
	echo "Checking for an existing configuration ..."
	if readcfg; then
		if [[ $ADMIN == $USER ]]; then
			echo
			echo "A valid admin configuration already exists for this user < $ADMIN >."
			echo "If you wish to start over, delete the configuration file"
			echo "               < $CFG >"
			echo "and try again."
			echo
			exit
		else
			echo
			echo "This user is currently configured as client of user < $ADMIN >."
			echo "If you continue, this user will create an own installation of the game instead."
			echo
			prompt
		fi
	fi
	if [[ ! "$APPNAME" || ! "$APPID" ]]; then
		echo "ERROR: APPNAME and APPID are not set. Check this script and your configuration"
		echo "       file and try again"
		echo
		exit 1
	fi
	echo
	ADMIN="$USER"
	ADMIN_HOME=~
	echo "You started the admin Installation for user < $ADMIN >"
	echo "This will create a configuration file in the location:"
	echo "               < $CFG >"
	echo
	prompt
	echo
	# Check for an existing SteamCMD
	if [[ -x $ADMIN_HOME/steamcmd/steamcmd.sh ]]; then
		STEAMCMD_DIR="$ADMIN_HOME/steamcmd"
		echo "An existing SteamCMD installation was found in < $STEAMCMD_DIR >"
		echo
	else
		# Ask for the SteamCMD directory
		echo "To download/update the game, installing SteamCMD is required. Be aware that"
		echo "this will use a lot of data! Please specify the place for SteamCMD to be"
		echo "installed in (absolute or relative to your home directory)."
		echo
		read -r -p "SteamCMD install directory (default: steamcmd) " STEAMCMD_DIR
		echo
		if [[ ! $STEAMCMD_DIR ]]; then 
			STEAMCMD_DIR=steamcmd; 
		fi
		if [[ ! $STEAMCMD_DIR =~ ^/ ]]; then
			STEAMCMD_DIR="$ADMIN_HOME/$STEAMCMD_DIR"
		fi
		# Download and install SteamCMD
		WDIR=$(pwd)
		mkdir -p "$STEAMCMD_DIR"
		cd "$STEAMCMD_DIR"
		echo "Downloading SteamCMD ..."
		until [[ $SUCCESS ]]; do
			wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz
			if (( $? )); then
				echo "SteamCMD Download failed."
				prompt "Retry?"
			else
				SUCCESS=1
			fi
		done
		unset SUCCESS
		echo "Extracting ..."
		tar xzvf steamcmd_linux.tar.gz
		rm steamcmd_linux.tar.gz &> /dev/null
		if [[ ! -x $STEAMCMD_DIR/steamcmd.sh ]]; then
			echo "ERROR: SteamCMD installation failed."
			echo
			exit 1
		fi
		echo "Updating SteamCMD ..."
		echo "quit" | "$STEAMCMD_DIR/steamcmd.sh"
		echo
		echo "SteamCMD installed successfully."
		echo
		cd "$WDIR"
	fi
	# Now, check for game install directory
	if [[ $(cat "$ADMIN_HOME/$APPNAME/.msm/appid" 2> /dev/null) == "$APPID" ]]; then
		INSTALL_DIR="$ADMIN_HOME/$APPNAME"
		echo "A previous game installation was found in < $INSTALL_DIR >"
		echo
	else
		echo "Next, please select the directory for the game server to be installed in"
		read -r -p "Game Server Installation Directory (default: $APPNAME) " INSTALL_DIR
		echo
		if [[ ! $INSTALL_DIR ]]; then 
			INSTALL_DIR="$APPNAME" 
		fi
		if [[ ! $INSTALL_DIR =~ ^/ ]]; then
			INSTALL_DIR="$ADMIN_HOME/$INSTALL_DIR"
		fi
		mkdir -p "$INSTALL_DIR"
	fi

	# Create Update Script
	local UPSCRIPT="$STEAMCMD_DIR/update"
	cat > "$UPSCRIPT" <<-EOF
		login anonymous
		force_install_dir "$INSTALL_DIR" 
		app_update $APPID
		quit
	EOF

	# Create Validate Script
	local VALSCRIPT="$STEAMCMD_DIR/validate"
	cat > "$VALSCRIPT" <<-EOF
		login anonymous
		force_install_dir "$INSTALL_DIR" 
		app_update $APPID validate
		quit
	EOF

	# Cleaning existing clients up
	delete-all-tmuxes
	rm -rf "$INSTALL_DIR/.msm/clients" &>/dev/null

	# Create settings directory within INSTALL_DIR
	mkdir -p "$INSTALL_DIR/.msm"
	# Make game and settings readable for all users
	chmod -R a+r "$INSTALL_DIR"
	# ... but make sure the server data (port, authtoken, etc.) stay private
	touch "$INSTALL_DIR/.msm/serverdata"
	chmod o-rwx "$INSTALL_DIR/.msm/serverdata"

	# Create other info and clients directory
	echo "$APPID" > "$INSTALL_DIR/.msm/appid"
	echo "$APPNAME" > "$INSTALL_DIR/.msm/appname"
	mkdir -p "$INSTALL_DIR/.msm/clients"
	chmod a+rwx,g+s "$INSTALL_DIR/.msm/clients"

	# Create Config and make it readable
	writecfg
	chmod a+r "$CFG"

	echo "Basic Setup Complete!"
	echo
	echo "Do you want to install/update the game right now? If you choose No, you can"
	echo "install the game later using \`$THIS_COMM install' or copy the files manually."
	echo
	prompt "Install Now?" noexit
	if (( $? )); then
		echo
		return 0
	fi
	update
	return 0
}

############################### PROGRAM STARTS HERE ##############################

# Check required packages
if [[ ! -x $(which awk)  ]]; then echo "ERROR: \`awk' is not installed, but required for this script!";  exit 1; fi
if [[ ! -x $(which tmux) ]]; then echo "ERROR: \`tmux' is not installed, but required for this script!"; exit 1; fi
if [[ ! -x $(which wget) ]]; then echo "ERROR: \`wget' is not installed, but required for this script!"; exit 1; fi
if [[ ! -x $(which tar)  ]]; then echo "ERROR: \`tar' is not installed, but required for this script!";  exit 1; fi

# Make some space
echo

if [[ $1 =~ "^(--)?help$"   ]]; then usage; exit 0; fi
if [[ $1 == "admin-install" ]]; then admin-install; shift; if [[ ! $1 ]]; then exit 0; fi; fi

# Load config, else start initial setup
readcfg || { setup; exit 0; }

set-instance "$DEFAULT_INSTANCE"
########################### LOOP THROUGH ALL PARAMETERS ##########################
while [[ $1 ]]; do
	unset printusage
	case "$1" in
		@*)
			set-instance ${1:1}
		;;

		help | --help | usage )
			usage
		;;

		info | about | license | copyright )
			info
		;;

		launch | start)
			start || exit 1
		;;

		halt | stop)
			stop
		;;

		restart)
			stop
			start || exit 1
		;;

		st | stat | status)
			if status; 
				then echo "$SERVER_TEXT is RUNNING!"; echo
				else echo "$SERVER_TEXT is STOPPED!"; echo
			fi
		;;

		console)
			console
		;;

		up | update | install)
			update
		;;

		create | create-instance)
			create-instance
		;;

		validate | repair)
			update validate
		;;

		*)
			echo "ERROR: Unrecognized Option: $1"
			echo
			usage
			exit 1
		;;
	esac
	shift

	# Reload possible config changes
	readcfg
done

if [[ $printusage ]]; then unset printusage; usage; exit 1; fi

exit 0
