#! /bin/bash
### BEGIN INIT INFO
# Provides: csgo-server
# Required-Start: $remote_fs $syslog
# Required-Stop: $remote_fs $syslog
# Default-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Short-Description: CS:GO Multi-Mode Server Manager
### END INIT INFO

##################################################################################
#                                                                                #
#  CS:GO Multi-Mode Server Manager (MSM)                                         #
#                                                                                #
#  Launch and setup your Counter-Strike : Global Offensive Dedicated Server.     #
#                                                                                #
#  Copyright (C) 2013-2015 Cr@zy <webmaster@crazyws.fr>                          #
#  Copyright (C) 2015      Maximilian Wende <maximilian.wende@gmail.com>         #
#                                                                                #
#  CS:GO Multi-Mode Server Manager is free software; you can                     #
#  redistribute it and/or modify it under the terms of the GNU Lesser General    #
#  Public License as published by the Free Software Foundation, either version 3 #
#  of the License, or (at your option) any later version.                        #
#                                                                                #
#  CS:GO Multi-Mode Server Manager is distributed in the hope                    #
#  that it will be useful, but WITHOUT ANY WARRANTY; without even the implied    #
#  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the      #
#  GNU Lesser General Public License for more details.                           #
#                                                                                #
#  You should have received a copy of the GNU Lesser General Public License      #
#  along with this program. If not, see http://www.gnu.org/licenses/.            #
#                                                                                #
#  Usage: ./csgo-server-launcher.sh {start|stop|status|restart|console|update}   #
#    - start: start the server                                                   #
#    - stop: stop the server                                                     #
#    - status: display the status of the server (down or up)                     #
#    - restart: restart the server                                               #
#    - console: display the server console where you can enter commands.         #
#     To exit the console without stopping the server, press CTRL + A then D.    #
#    - update: update the server                                                 #
#    - create: creates a new server                                              #
#                                                                                #
##################################################################################

# General Configuration file location
# if a relative path is given, it is interpreted as relative to the user's home directory
MSM_CFG=csgo-msm.cfg

# Get absolute config file location, based on MSM_CFG
# $1 is the base directory, if omitted, the current home directory is taken
function cfgfile {
    if [ `echo $MSM_CFG | grep ^/` ]; then
        echo $MSM_CFG
    else
        if [ $1 ]; then
            echo $1/$MSM_CFG
        else
            echo ~/$MSM_CFG
        fi
    fi
}

# Important Variables
THIS_SCRIPT="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)/$(basename "${BASH_SOURCE[0]}")"
CFG=`cfgfile`
APPID=740 #CS:GO

function start {
  if [ ! -d $DIR_ROOT ]; then echo "ERROR: $DIR_ROOT is not a directory"; exit 1; fi
  if [ ! -x $DIR_ROOT/$DAEMON_GAME ]; then echo "ERROR: $DIR_ROOT/$DAEMON_GAME does not exist or is not executable"; exit 1; fi
  if status; then echo "$SCREEN_NAME is already running"; exit 1; fi
  
  # Create runscript file for autoupdate
  echo "Create runscript file '$STEAM_RUNSCRIPT' for autoupdate..."
  cd $DIR_STEAMCMD
  echo "login $STEAM_LOGIN $STEAM_PASSWORD" > $STEAM_RUNSCRIPT
  echo "force_install_dir $DIR_ROOT" >> $STEAM_RUNSCRIPT
  echo "app_update 740" >> $STEAM_RUNSCRIPT
  echo "quit" >> $STEAM_RUNSCRIPT
  chown $USER $STEAM_RUNSCRIPT
  chmod 600 $STEAM_RUNSCRIPT
  
  # Generated misc args
  GENERATED_ARGS="";
  if [ -z "${API_AUTHORIZATION_KEY}" -a -f $DIR_GAME/webapi_authkey.txt ]; then API_AUTHORIZATION_KEY="`cat $DIR_GAME/webapi_authkey.txt`"; fi
  if [ ! -z "${API_AUTHORIZATION_KEY}" ]
  then
    GENERATED_ARGS="-authkey ${API_AUTHORIZATION_KEY}"
    if [ ! -z "${WORKSHOP_COLLECTION_ID}" ]; then GENERATED_ARGS="${GENERATED_ARGS} +host_workshop_collection ${WORKSHOP_COLLECTION_ID}"; fi
    if [ ! -z "${WORKSHOP_START_MAP}" ]; then GENERATED_ARGS="${GENERATED_ARGS} +workshop_start_map ${WORKSHOP_START_MAP}"; fi
  fi
  
  # Start game
  PARAM_START="${PARAM_START} ${GENERATED_ARGS}"
  echo "Start command : $PARAM_START"
  
  if [ `whoami` = root ]
  then
    su - $USER -c "cd $DIR_ROOT ; screen -AmdS $SCREEN_NAME ./$DAEMON_GAME $PARAM_START"
  else
    cd $DIR_ROOT
    screen -AmdS $SCREEN_NAME ./$DAEMON_GAME $PARAM_START
  fi
}

function stop {
  if ! status; then echo "$SCREEN_NAME could not be found. Probably not running."; exit 1; fi

  if [ `whoami` = root ]
  then
    tmp=$(su - $USER -c "screen -ls" | awk -F . "/\.$SCREEN_NAME\t/ {print $1}" | awk '{print $1}')
    su - $USER -c "screen -r $tmp -X quit"
  else
    screen -r $(screen -ls | awk -F . "/\.$SCREEN_NAME\t/ {print $1}" | awk '{print $1}') -X quit
  fi
}

function status {
  if [ `whoami` = root ]
  then
    su - $USER -c "screen -ls" | grep [.]$SCREEN_NAME[[:space:]] > /dev/null
  else
    screen -ls | grep [.]$SCREEN_NAME[[:space:]] > /dev/null
  fi
}

function console {
  if ! status; then echo "$SCREEN_NAME could not be found. Probably not running."; exit 1; fi

  if [ `whoami` = root ]
  then
    tmp=$(su - $USER -c "screen -ls" | awk -F . "/\.$SCREEN_NAME\t/ {print $1}" | awk '{print $1}')
    su - $USER -c "screen -r $tmp"
  else
    screen -r $(screen -ls | awk -F . "/\.$SCREEN_NAME\t/ {print $1}" | awk '{print $1}')
  fi
}

function update {
    echo
    if [ `whoami` != $ADMIN ]; then
        echo "Only the admin ($ADMIN) can manage and update the game installation."
        echo
        prompt "Do you wish to switch users to perform the update"
        echo
        echo "Please log in to the account of $ADMIN now!"
        su - $ADMIN -c "$THIS_SCRIPT update"
        return $?
    fi
    LOGFILE="$STEAMCMD_DIR/update.log"
    rm "$LOGFILE" &> /dev/null
    echo "Starting Game Update."
    echo "Log File: $LOGFILE"
    echo
    tries=1
    try=0
    until [ $SUCCESS -o $try -ge $tries]; do
        let try=try+1
        echo "Current Time: $(date)" | tee -a "$LOGFILE"
        printf "[%2d/%2d] Trying to update the game using SteamCMD.\n\n" $try $tries | tee -a "$LOGFILE"
        "$STEAMCMD_DIR/steamcmd.sh" +runscript "$STEAMCMD_DIR/update" 2>&1 | tee -a "$LOGFILE"
        printf "\n\n" | tee -a "$LOGFILE"
    done
    if [ $SUCCESS ]; then
        echo "Update completed successfully"
        echo
        return 0
    else
        echo "Update failed. For more information, see the log file at"
        echo "                $LOGFILE"
        echo
        return 1
    fi
}

function checkvars {
    if [ $1 ]; then TESTUSER=$1; else TESTUSER=`whoami`; fi
    if [ -z "$ADMIN" ]; then
        echo "ERROR: ADMIN is not defined"
        return 1
    fi
    if [ "$TESTUSER" == "$ADMIN" -a -z "$STEAMCMD_DIR" -a ! -x "$STEAMCMD_DIR/steamcmd.sh" ]; then
        echo "ERROR: STEAMCMD_DIR is not defined or steamcmd.sh was not found in it"
        return 1
    fi
    if [ -z "$INSTALL_DIR" ]; then
        echo "ERROR: INSTALL_DIR is not defined"
        return 1
    fi
    return 0
}

function readcfg {
    if [ -r $CFG ]; then
        source $CFG
        checkvars
        ERR=$?
        if [ $ERR -ne 0 ]; then
            echo "ERROR: One or more errors in the configuration file $CFG"
        fi
        return $ERR
    fi
    return 1
}

function createcfg {
    checkvars
    if [ $? -ne 0 ]; then exit; fi
    CFG=`cfgfile`
    echo "Creating CS:GO MSM Config File in $CFG"
    echo
    rm $CFG &> /dev/null

    function printcfg {
        echo "#! /bin/bash"
        echo "ADMIN=$ADMIN"
        echo "INSTALL_DIR=$INSTALL_DIR"
        # Vars that are only interesting for the admin
        if [ `whoami` == "$ADMIN" ]; then
            echo "STEAMCMD_DIR=$STEAMCMD_DIR"
        fi
    }

    printcfg > $CFG
}

# A yes/no prompt. With the first parameter $1, an alternative prompt message can be given
# By default, a no will exit the program with an exit code of 1. By putting anything as $2,
# the function will instead return with a value of 1.
function prompt {
    PROMPT="Continue"
    if [ "$1" ]; then PROMPT=$1; fi
    read -r -p "$PROMPT? (Y/n) " INPUT
    if [[ "$INPUT" && "$INPUT" != "y" && "$INPUT" != "Y" ]] ; then 
        if [ "$2" ]; then return 1; else exit 1; fi
    fi
}

function setup {
    # First-time setup
    echo
    echo "-------------------------------------------------------------------------------"
    echo "                CS:GO Multi-Mode Server Manager - Initial Setup"
    echo "-------------------------------------------------------------------------------"
    echo
    echo "It seems like this is the first time you use this script on this machine."
    echo "Before advancing, be aware of a few things:"
    echo
    echo ">>  A configuration file will be created in the location:"
    echo "                $CFG"
    echo
    echo "    If you want to use a different location, exit and edit"
    echo "    the \$MSM_CFG variable within this file accordingly."
    echo
    echo ">>  When installing for multiple users, make sure that this script (located in"
    echo "    $THIS_SCRIPT), is readable to every user."
    echo
    prompt "Do you want to continue"
    # Query steam installation admin user
    echo
    echo "Please choose the user that is responsible for the game installation and"
    echo "updates on this machine. As long as the access rights are correctly set,"
    echo "this server will use the game data provided by that user, which makes"
    echo "re-downloading the game for multiple users unnecessary."
    echo
    while [ ! "$ADMIN_HOME" ]; do
        read -p "Admin's username (default: $USER) " -r ADMIN
        if [ ! $ADMIN ]; then ADMIN=$USER; fi
        if [ ! `getent passwd $ADMIN` ]; then
            echo
            echo "User $ADMIN does not exist. Please try again!"
            echo
        fi
        ADMIN_HOME=$(eval echo "~$ADMIN")
        if [ ! -r "$ADMIN_HOME" ]; then
            echo
            echo "That user's home directory ($ADMIN_HOME) is not readable. Please specify a different admin."
            echo
            ADMIN_HOME=
        fi
    done
    ADMIN_CFG=`cfgfile $ADMIN_HOME`
    # Check if the admin has a working configuration already
    if [ `whoami` != "$ADMIN" ]; then
        echo
        if [ -r "$ADMIN_CFG" ]; then
            source "$ADMIN_CFG"
            checkvars $ADMIN
            if [ $? -ne 0 ]; then
                echo "INFO: One or more errors in the configuration of $ADMIN. Reinstalling."
                INSTALL_REQUIRED=1
            fi
        else 
            INSTALL_REQUIRED=1
        fi
        if [ $INSTALL_REQUIRED ]; then
            echo
            echo "Additional installation steps have to be taken on the admin account ($ADMIN)"
            echo "Please log in to the account of $ADMIN now!"
            su - $ADMIN -c "$THIS_SCRIPT admin_install"
            if [ $? -ne 0 ]; then
                echo
                echo "ERROR: Installing as $ADMIN failed!"
                exit 1
            fi
            source "$ADMIN_CFG"
        fi
        createcfg
    else
        admin_install
    fi
}

function admin_install {
    echo
    echo "-------------------------------------------------------------------------------"
    echo "                CS:GO Multi-Mode Server Manager - Admin Install"
    echo "-------------------------------------------------------------------------------"
    echo
    # Check for an existing configuration
    readcfg > /dev/null
    if [ $? -eq 0 ]; then
        if [ $ADMIN == `whoami` ]; then
            echo "A valid admin configuration already exists for the user $ADMIN."
            echo "If you wish to start over, delete the configuration file"
            echo "                $CFG"
            echo "and try again."
            echo
            exit
        else
            echo "This user is currently configured as client of user $ADMIN."
            echo "If you continue, this user will create an own installation of the game instead."
            echo
            prompt
        fi
    fi
    ADMIN=`whoami`
    ADMIN_HOME=~
    echo "Admin Installation for user $ADMIN"
    echo
    echo "This will create a configuration file in the location:"
    echo "                $CFG"
    echo
    prompt
    echo
    # Check for an existing SteamCMD
    if [ -x "$ADMIN_HOME/steamcmd/steamcmd.sh" ]; then
        STEAMCMD_DIR="$ADMIN_HOME/steamcmd"
        echo "An existing SteamCMD installation was found in $STEAMCMD_DIR"
        echo
    else
        # Ask for the SteamCMD directory
        echo "To download/update the game, installing SteamCMD is required. Be aware that"
        echo "this will use a lot of data! Please specify the place for SteamCMD to be"
        echo "installed in (absolute or relative to your home directory)."
        echo
        read -r -p "SteamCMD install directory (default: steamcmd) " STEAMCMD_DIR
        echo
        if [ -z "$STEAMCMD_DIR" ]; then 
            STEAMCMD_DIR=steamcmd; 
        fi
        if [ ! `echo $STEAMCMD_DIR | grep ^/` ]; then
            STEAMCMD_DIR="$ADMIN_HOME/$STEAMCMD_DIR"
        fi
        # Download and install SteamCMD
        WDIR=`pwd`
        mkdir -p "$STEAMCMD_DIR"
        cd "$STEAMCMD_DIR"
        echo "Downloading SteamCMD ..."
        until [ $SUCCESS ]; do
            wget https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz
            if [ $? -ne 0 ]; then
                echo "SteamCMD Download failed."
                prompt "Retry"
            else
                SUCCESS=1
            fi
        done
        echo "Extracting ..."
        tar xzvf steamcmd_linux.tar.gz
        rm steamcmd_linux.tar.gz &> /dev/null
        if [ ! -x "$STEAMCMD_DIR/steamcmd.sh" ]; then
            echo "ERROR: SteamCMD installation failed."
            exit 1
        fi
        echo "Updating SteamCMD ..."
        echo "quit" | "$STEAMCMD_DIR/steamcmd.sh"
        echo
        echo "SteamCMD installed successfully."
        echo
        cd "$WDIR"
    fi
    # Now, ask for the Game Directory
    echo "Next, please select the directory for the game server to be installed in"
    read -r -p "Game Server Installation Directory (default: server-base) " INSTALL_DIR
    echo
    if [ -z "$INSTALL_DIR" ]; then 
        INSTALL_DIR=server-base; 
    fi
    if [ ! `echo $INSTALL_DIR | grep ^/` ]; then
        INSTALL_DIR="$ADMIN_HOME/$INSTALL_DIR"
    fi
    mkdir -p "$INSTALL_DIR"

    # Create Update Script
    UPSCRIPT="$STEAMCMD_DIR/update"
    rm "$UPSCRIPT" &> /dev/null
    echo "login anonymous" >> "$UPSCRIPT"
    echo "force_install_dir $INSTALL_DIR" >> "$UPSCRIPT"
    echo "app_update $APPID" >> "$UPSCRIPT"
    echo "quit" >> "$UPSCRIPT"

    # Create Repair Script
    UPSCRIPT="$STEAMCMD_DIR/repair"
    rm "$UPSCRIPT" &> /dev/null
    echo "login anonymous" >> "$UPSCRIPT"
    echo "force_install_dir $INSTALL_DIR" >> "$UPSCRIPT"
    echo "app_update $APPID validate" >> "$UPSCRIPT"
    echo "quit" >> "$UPSCRIPT"

    # Create Config
    createcfg

    # Make the game and config files readable to all.
    # This will not override permissions for your home directory itself
    chmod a+r "$ADMIN_CFG"
    chmod a+r "$INSTALL_DIR"
    echo "Basic Setup Complete!"
    echo
    echo "Do you want to install the game right now? If you choose No, you can"
    echo "install the game later using 'csgo-server update' or copy the files manually."
    echo
    prompt "Install Now" noexit
    if [ $? -eq 0 ]; then
        update
    else
        echo
    fi
    return 0
}

function usage {
  echo "Usage: service csgo-server-launcher {start|stop|status|restart|console|update|create}"
  echo "On console, press CTRL+A then D to stop the screen without stopping the server."
}

### BEGIN ###

# Check required packages
PATH=/bin:/usr/bin:/sbin:/usr/sbin
if [ ! -x `which awk` ]; then echo "ERROR: You need awk for this script (try apt-get install awk)"; exit 1; fi
if [ ! -x `which screen` ]; then echo "ERROR: You need screen for this script (try apt-get install screen)"; exit 1; fi
if [ ! -x `which wget` ]; then echo "ERROR: You need wget for this script (try apt-get install wget)"; exit 1; fi
if [ ! -x `which tar` ]; then echo "ERROR: You need tar for this script (try apt-get install tar)"; exit 1; fi


# Commands that override initial setup
if [ `echo "$1" | grep "^-*help"` ]; then usage; exit; fi
if [ "$1" == "admin_install" ]; then admin_install; exit; fi


# Load config, else start initial setup
readcfg
if [ $? -ne 0 ]; then setup; exit; fi

case "$1" in

  start)
    echo "Starting $SCREEN_NAME..."
    start
    sleep 5
    echo "$SCREEN_NAME started successfully"
  ;;

  stop)
    echo "Stopping $SCREEN_NAME..."
    stop
    sleep 5
    echo "$SCREEN_NAME stopped successfully"
  ;;
 
  restart)
    echo "Restarting $SCREEN_NAME..."
    status && stop
    sleep 5
    start
    sleep 5
    echo "$SCREEN_NAME restarted successfully"
  ;;

  status)
    if status
    then echo "$SCREEN_NAME is UP"
    else echo "$SCREEN_NAME is DOWN"
    fi
  ;;
 
  console)
    echo "Open console on $SCREEN_NAME..."
    console
  ;;
  
  update)
    echo "Updating $SCREEN_NAME..."
    update
  ;;
  
  create)
    echo "Creating $SCREEN_NAME..."
    create
  ;;

  *)
    usage
    exit 1
  ;;

esac

exit 0

